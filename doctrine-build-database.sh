#!/usr/bin/env bash

#***********************************************************************
# As we also want to log SQL statements, we need to change the database
# configuration. Edit databases.yml and add the following configuration
# at the beginning of the file:
#
# # config/databases.yml
# cache:
#   propel:
#     class: sfPropelDatabase
#     param:
#       classname: DebugPDO
#
# or For now, the cache environment inherits from the default configuration.
# Edit the settings.yml configuration file to add the cache environment
# specific configuration:
# apps/frontend/config/settings.yml
# cache:
#   .settings:
#     error_reporting: <?php echo (E_ALL | E_STRICT)."\n" ?>
#     web_debug:       true
#     cache:           true
#     etag:            false
#
# In these settings, the symfony template cache feature has been activated
# with the cache setting and the web debug toolbar has been enabled with
# the web_debug setting.
#***********************************************************************
# As the default configuration caches all settings in the cache, you need
# to clear it before being able to see the changes in your browser:
php symfony cc
#***********************************************************************

#***********************************************************************
# To create the tables:
php symfony doctrine:build-schema
#***********************************************************************

#***********************************************************************
# To tell symfony to use this database for the Jobeet project:
php symfony configure:database "mysql:host=localhost;dbname=jobeet" root mYsEcret
#***********************************************************************

#***********************************************************************
# To generate the SQL you must build your models from your schema files.
# php symfony doctrine:build-model or
php symfony doctrine:build --model
#***********************************************************************

#***********************************************************************
# To generate SQL statements in the data/sql/ directory, optimized for
# the database engine we have configured:
php symfony doctrine:build --sql
#***********************************************************************

#***********************************************************************
# To actually create the tables in the database, you need to run the
# doctrine:insert-sql task:
php symfony doctrine:insert-sql
#***********************************************************************

#***********************************************************************
# To generate forms and validators for the Jobeet model classes:
php symfony doctrine:build --all --no-confirmation
#***********************************************************************

#***********************************************************************
# To populate the database with some initial data:
php symfony doctrine:data-load
#***********************************************************************

#***********************************************************************
# Run the doctrine:build --all --and-load task to make sure everything is
# generated from your schema. This will generate your forms, filters,
# models, drop your database and re-create it with all the tables.
php symfony doctrine:build --all --and-load
#***********************************************************************


#***********************************************************************
# Most of the time, a form has to be serialized to the database. As
# symfony already knows everything about your database model, it can
# automatically generate forms based on this information. In fact,
# when you launched the doctrine:build --all task during day 3, symfony
# automatically called the doctrine:build --forms task:
# php symfony doctrine:build-form or
php symfony doctrine:build --forms
#***********************************************************************


#***********************************************************************
# Configuring filters is quite the same as configuring the form views. As
# a matter of fact, filters are just forms. And as for the forms, the
# classes have been generated by the doctrine:build-all task. You can also
# re-generate them with the doctrine:build-filters task.
# The form filter classes are located under the lib/filter/ directory and
# each model class has an associated filter form class (JobeetJobFormFilter
# for JobeetJobForm).
# Let's remove them completely for the category module:
# # apps/backend/modules/category/config/generator.yml
# config:
#   filter:
#     class: false
# For the job module, let's remove some of them:
# # apps/backend/modules/job/config/generator.yml
# filter:
#   display: [category_id, company, position, description, is_activated, is_public, email, expires_at]
# As filters are always optional, there is no need to override the filter form class to configure the fields to be displayed.
php symfony doctrine:build-filter
#***********************************************************************
